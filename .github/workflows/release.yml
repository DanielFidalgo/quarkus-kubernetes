name: Release

on:
  release:
    types: [published]

env:
  RELEASE_REVISION: "${{ github.event.release.tag_name }}"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-west-2
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: default
  ECR_REPOSITORY: ${{ github.event.repository.name }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
          - name: Cancel Previous Runs
            uses: styfle/cancel-workflow-action@0.4.1
            with:
              access_token: ${{ github.token }}

          - name: cache layers
            uses: actions/cache@v2
            with:
              path: |
                ~/.m2
                ~/m2
                /tmp/.buildx-cache
              key: ${{ runner.os }}-single-buildx-${{ github.sha }}
              restore-keys: |
                ${{ runner.os }}-single-buildx

          - name: Checkout
            uses: actions/checkout@v2
            with:
              ref: ${{ github.event.release.head.sha }}

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}

          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1

          - name: Build
            run: |
              ./mvnw clean package -Pnative -Dquarkus.container-image.registry=${{ steps.login-ecr.outputs.registry }} \
              -Dquarkus.container-image.name=${{ env.ECR_REPOSITORY }} \
              -Dquarkus.container-image.tag=${{ env.RELEASE_REVISION }} \
              -Dquarkus.container-image.group="" \
              -Dquarkus.kubernetes.namespace=default
              -Dquarkus.native.container-build=true

          - name: Set up Docker Buildx
            id: buildx
            uses: docker/setup-buildx-action@master
            with:
              install: true

          - name: Build & Push Image
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_REVISION }}
            run: |
              docker build -f src/main/docker/Dockerfile.native-distroless \
              --cache-from=type=local,src=/tmp/.buildx-cache \
              --cache-to=type=local,dest=/tmp/.buildx-cache-new \
              --push \
              -t ${{ env.RELEASE_IMAGE }}  .

              rm -rf /tmp/.buildx-cache
              mv /tmp/.buildx-cache-new /tmp/.buildx-cache

          - name: Apply Kubernetes deployment
            uses: kodermax/kubectl-aws-eks@master
            env:
              DEPLOYMENT: target/kubernetes/kubernetes.yml
            with:
              args: apply -f $DEPLOYMENT

          - name: Deploy to Kubernetes cluster
            uses: kodermax/kubectl-aws-eks@master
            env:
              RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_REVISION }}
            with:
              args: set image deployment/${{ env.ECR_REPOSITORY }} ${{ env.ECR_REPOSITORY }}=${{ env.RELEASE_IMAGE }}